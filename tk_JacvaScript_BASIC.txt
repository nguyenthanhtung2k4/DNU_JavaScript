NGUỒN VIDEO: https://www.youtube.com/playlist?list=PL_-VfJajZj0VgpFpEVFzS5Z-lkXtBe-x5

==========================================================================================
* LUƯ Ý: 
          KHI THỰC HIỆN GỌI CÁC BIẾN KHÁC DÙNG DẤU +
                    VD: 
                         var tung=10;
                         string="so la: "+tung;

====================================================================================================================================

TÀI  LIỆU  THAM KHẢO TẠI  TRANG WEB:
          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
          https://www.youtube.com/playlist?list=PL_-VfJajZj0VgpFpEVFzS5Z-lkXtBe-x5
          https://developer.mozilla.org/en-US/docs/Web/JavaScript

Duyệt mã:
console: duyệt mã
console.log() : là kết quả trả về
console.table() : là kết quả trả về một bảng giống như  word.

Biến:
var: dùng để khai báo các biến trong js : NÓ TỒN TẠI BÊN TRONG HÀM MÀ NÓ ĐƯỢC KHAI BÁO( FUNCTION)
let: dùng để khai báo các biến trong js : NÓ TỒN TẠI BÊN TRONG KHỐI MÃ NÓ ĐƯỢC KHAI BÁO ( IF ,FOR)
const: dùng để khai báo các biến trong js:NÓ TỒN TẠI BÊN TRONG KHỐI MÃ NÓ ĐƯỢC KHAI BÁO GIỐNG LET (IF ,FOR)

in: (for in) không hẳn là biến: NHƯNG ĐƯỢC HIỂU NÓ DÙNG ĐỂ KIỂU TRA THUỘC TÍNH ĐÓ CÓ TỒN TẠI HAY KHÔNG
               VD:
                    const person = {
                    name: 'John',
                    age: 30,
                    city: 'New York'
                    };
                    console.log('name' in person); // Kết quả: true
                    console.log('gender' in person); // Kết quả: false
               VD2:
                    var Object={
                    name:'tung',
                    age:20,
                    adreest:'ha nam'
               }
               for(var key in Object){
                    console.log(key);// dung de lay name Object
                    console.log(Object[key]); // dung de lay  value Object
               }
of: (for of) không hẳn là biến: NHƯNG ĐƯỢC HIỂU NÓ DÙNG TRONG FOR OF--> dÙNG ĐỂ LẶP QUA CÁC PHẦN TỬ
               VD:
                    const arr = [1, 2, 3, 4, 5];
                    for (const element of arr) {
                    console.log(element); // Lặp qua và in ra từng phần tử của mảng arr
                    }

Kiểm tra kiểu dữ liệu:
          typeof(tung)
Kiểm tra các dữ liệu  có đúng hay không
          Mảng      : tung.isArray()
          Object    : tung.isObject()
          Nan       : tung.isNaN()   ==>>  kieu  ta du lieu true la so ; false : la chu
          parseFloat :  trả về số thực
          parseInt :  trả về số nguyên
               vd: 
                    var a;
                    a=parseFloat(prompt("number"))
          this :  là đại diện cho  một đối tượng trong object--> nó giống như con trỏ trỏ đến object ==> VD bên dưới:
               vd:
                    function Person(){
                        this.name="Tung";
                        this.age=27;
                    }
                    var p=new Person();
                    alert(p.name);

                    ==> this đại diện cho thằng Person()

          Object.values({Giá_trị_truyền_vào}) ==> Nó sẽ chuyển Object thành Arr ==> VD bên dưới
          
##############################################################################################################################################################
Các hàm  về built-in  
          1. Alert       : in ra  một bảng kết quả
          2. Confirm     : xác nhận độ tuổi     
          3. Consele     :in ra kết quả
                    Consele.log  :thường được sử dụng nhiều : nó in  ra kết quả  bình thường
                    Consele.warn : hàm này cũng để in  ra nhưng nó  sẽ cảnh báo
                    Consele.error: hàm này cũng để in ra nhưng nó  in  ra kết  quả lỗi
          4. Prompt      :Nhập  vào input
                         vd:
                                   <script>
                                        var so=parseFloat(prompt("Nhap so  vao"))
                                        if(so>=1){
                                             alert('so  nguyen')
                                        }else{
                                             alert('so  am ')
                                        }
                                   </script>
          5. document    : Để nó tương tác với nọi dung của trang web
               
               -Truy cập phần tử HTML:
                    getElementById() ===>  Trả về phần tử HTML với id cụ thể.
                    getElementsByClassName() ===>  Trả về một mảng chứa tất cả các phần tử có class cụ thể.
                    getElementsByTagName() ===>  Trả về một mảng chứa tất cả các phần tử với tên thẻ HTML cụ thể.
                    querySelector() ===>  Trả về phần tử đầu tiên phù hợp với bộ chọn CSS được cung cấp.
                    querySelectorAll() ===>  Trả về tất cả các phần tử phù hợp với bộ chọn CSS được cung cấp dưới dạng NodeList.
              
               -Thao tác với nội dung và thuộc tính HTML:
                    document.write()    : Có nhiệm vụ là để viết vào html  khi nó được gọi đến:
                                        vd:
                                             document.write('<h1>thanhtung</h1>')

                    document.innerHTML  ===> Lấy hoặc đặt HTML bên trong một phần tử.
                    document.innerText  ===> Lấy hoặc đặt văn bản của một phần tử và lấy các phần tử mẹ
                    document.textContent===> Lấy các phần tử trong thẻ.
                    document.getAttribute()  ===> Trả về giá trị của một thuộc tính được chỉ định của một phần tử.
                    document.setAttribute()  ===> Đặt giá trị cho một thuộc tính cụ thể của một phần tử.
                    document.removeAttribute()  ===> Xóa một thuộc tính cụ thể khỏi một phần tử.
               
               -Tạo và xóa phần tử HTML mới:

                    createElement(): Tạo một phần tử HTML mới với tên thẻ được chỉ định.
                    appendChild(): Thêm một phần tử con vào cuối danh sách các phần tử con của một phần tử cha.
                    removeChild(): Xóa một phần tử con khỏi phần tử cha.
               
               -Xử lý sự kiện:
                    addEventListener(): Gắn một bộ xử lý sự kiện cho một phần tử.
                    removeEventListener(): Loại bỏ một bộ xử lý sự kiện đã được gắn với một phần tử.
               
               -Cookie:
                    cookie: Thuộc tính của document cho phép bạn đọc và ghi các cookie.
               
               -Định vị và cuộn trang:
                    scrollTo(): Cuộn trang đến vị trí được chỉ định.
                    scrollBy(): Cuộn trang theo một số lượng cụ thể.
               
               -Thông tin trang:
                    document.URL: Trả về URL của trang hiện tại.
                    document.title: Trả về hoặc đặt tiêu đề của trang.

          5. setTimeout  : thời gian xác nhận  để in ra kết quả in ra  một  lần
          6. setInterval : thời gian  xác nhận  để in ra và in ra nhiều lần  theo chu kỳ  thời gian đã cho
##############################################################################################################################################################

PHÉP TOÁN TỬ:
     +              Phép toán cộng
     -              Phép toán trừ 
     *              Phép toán nhân
     **             Phép toán Nhân mũ
     /              Phép  toán chia
     %              Phép  toán lấy số  dư
     >              Phép  toán so sánh lớn hơn
     =              Phép  toán so sánh bằng
     <              Phép  toán so sánh nhỏ hơn
     !=             Phép  toán so sánh không bằng
     >=             Phép  toán so sánh lớn hơn hoặc bằng
     >==            Phép  toán so sánh lớn hơn hoặc bằng so  sánh cả kiểu dữ liệu
     <=             Phép  toán so sánh nhỏ hơn
     <==            Phép  toán so sánh nhỏ hơn hoặc bằng so  sánh cả kiểu dữ liệu
     ==             Phép  toán so sánh bằng
     ===            Phép  toán so sánh bằng hoặc bằng so  sánh cả kiểu dữ liệu
//////// Lớp toán:
                    Math.random() : lam ran dom cac so
                    Math.min()    : tim so min trong tat cac so min
                    Math.max()    : tim so max trong tat cac  so
                    Math.sqrt()   : tinh so  căn 
                    Math.pow()    : so mu
                    toFixed({tham_so}) :
                         vd: 
                                   var so=10.3345634643;
                                   console.log(so.toFixed(2)) ;
                                   ==>kết quả trả về: 10.33
##############################################################################################################################################################
SỬ LÝ CHUỖI ( STRING)

          ESC6: Khi viết nhiều thứ khi  in  ra ta cũng có thể in ra như sau:
               var tung= 'thanhtung';
               var ten='ten';
               Consele.log(`toi la  tung ${ten} ${tung}`)
     * lưu ý:  khi  chèn các biến vào sử dụng  $ thì phải dùng dấu mũ nghiên ` 
          Tìm chuỗi index: 
               vd:
                    var  tung="tung dang hoc javascript"
                    console.log(tung.index0f('tung'))
               ==>  tung.index({tim_chuoi,so_thu_tu})
          Tìm chuỗi bằng search: 
               vd:
                    var str ="Hello world!";
                    Console.log(str.search("world"));
               ==> tung.search({tim_chuoi})
          ==>  Tìm kiếm bằng search KHÔNG HỖ TRỢ  TÌM  KIẾM THEO  KÍ TỰ
                        index  HỖ  TRỢ TÌM KIẾM BẰNG KÍ  TỰ  ĐƯỢC.
          
          Cắt chuỗi: string.slice
               vd:
                    var str ="Hello world!";
                    console.log(str.slice(0,5));
                    -->  Kết quả trả về là: world!

          Chèn chuỗi: string
               vd:
                    var str ="Hello  tung world! tung";
                    console.log(str.replace({chu_muon_thay},{chu_thay_the}))
          * Lưu ý :Khi  ta muốn  thay  thế  ta  có  thê thay  thế bằng cách thay  một chữ  hoặc  nhiều  chữ.
               -Thay  thế  một  chữ  ta có thể thay như  sau: {chu_muon_thay},{chu_thay_the}
               -Thay  thế  một  chữ  tất  cả giống nhau ta có thể thay  như  sau: /{chu_muon_the}/g ,{chu_muon_the}
          Chữ  in hoa ,  in thường:
               toUpperCase() :  Chữ in hoa
               toLowerCase() :  Chữ in thường
          
          Loại bỏ khoảng trắng: trim
               vd: 
                    var str ="  Hello world!   ";
                    console.str.trim()
          Tạo  ra mảng  slpit():
               vd:
                    var str = "tung,thanh,nguye";
                    console.log(str.split(','));
                ==>kết quả trả về:[tung, thanh, nguye]

          Thay  thế  vị trí: charAt hoặc  []
               vd:
                    var str ="Hello world!";
                    console.log(str.charAt(1));
                    ==> kết quả trả về: e
               hoặc :
                    var str ="Hello world!";
                    console.log(str[1]);
                    ==> kết quả trả về: e
          Sắp xếp các Chữ-Số: sort()
                    vd: sap xep cac text:
                                   var  mau=new Array('do','vang','cam','tim','hong');
                                   document.write('<br><h2>mang dau: </h3><br><h2>');
                                   document.write(mau+"<h2>",)
                                   document.write('<br> mang duoc sap xep:  <br>')
                                   document.write(mau.sort()+", ")
                    vd: sap xep cac so bằng function():
                                   ar so=[140,35,57,25,234,65,3];
                                   document.write('mang so ban dau: </h3><br><h2>')
                                   document.write('<br>'+so);
                                   document.write('<br>Mang sap xep')

                                   so.sort(function(a,b){return a-b})
                                   document.write('<br>'+so)
                              
                              ==> Sắp xếp bằng sort() cũng có thể sắp xếp các số min max bang sort
                              ==> Sử dụng thằng sort(function(a,b){return a-b})
          Sắp xếp từ dưới lên: revese()
                    vd:
                              var  mau=new Array('do','vang','cam','tim','hong');
                              document.write('<br> mang duoc reverse():  <br>')
                              document.write(mau.reverse()+", ")

##############################################################################################################################################################
SỬ LÝ CHUỐI(STRING):
          Chuyển số thành  chuỗi: toString
               vd: 
                    var so =10;
                    console.log(so.toString());

                    ==> kết quả trả về:  10
                    Nhưng nó là kiểu dữ liệu  string k còn là kiểu number nữa!
          Làm tròn ,  lấy  số thập  phân: fixed
               var so=10.3345634643;
               console.log(so.toFixed(2)) ;
               ==>kết quả trả về: 10.33
##############################################################################################################################################################
LÀM VIỆC VỚI MẢNG (arr):

          Cách khởi tạo:
                         vd:
                              var array=['tung',thanh','nguyen'];
          Truy xuất Mảng:
                         vd:
                              var array=['tung',thanh','nguyen'];
                              console.log(array[0],array.length)

                              ==>kết quả trả về: tung 3
          Các kiểu dữ liệu  trong Mảng:
               length    : đếm các phần tử trong mảng
               substring(a,b) : Lấy kí tự thứ a đến b
                          vd: 
                              var str="tung thanh nguyen"
                              alert(str.substring(1,2))
                              ==>kết quả trả về: u
               toString  : Chuyển sang kiểu dữ liệu  STRING
               join      : Lấy tất cả các mảng chuyển thành string ngoài ra ta cũng có thể ngăn cách các phần tử.
                         vd:
                                   var array=['tung',thanh','nguyen'];
                                   console.log(array.join('-'));
                                   ===>>kết quả trả về: tung-thanh-nguyen

               shift()   : Xóa phần tử ĐẦU MẢNG và in phần tử bị  xóa
               pop()     : Xóa phần tử CUỐI MẢNG và in phần tử bị  xóa
               push({pt_muon_them},{})      : Thêm phần tử mới vào trong  mảng Ở CUỐI MẢNG
               unshift({pt_muon_them},{})   : Thêm phần tử mới vào trong  mảng Ở ĐẦU MẢNG
                         vd:
                                   var array=['tung',thanh','nguyen'];
                                   array.push('dao');
                                   console.log(array);
                                   ==>kết quả trả về: ['tung', 'thanh', 'nguyen', 'dao']
                         vd:  unshift làm tương tự như  vậy.
               splice({vitri_con_tro},{so_lg_xoa_pt},{string_them_phan_tu}) 
                         ==> Nó sẽ giúp bạn  đặt vị trí con trỏ và xóa đi  bất  kì pt nào,  cx có them  phân tu  moi  vao  mang do.
                         vd:
                              var tung=['thanh','tung','nguyen']; 
                              console.log(tung.splice(1,1,'cuacace'));
                              --> Kết quả: ['tung','cuacace','nguyen]
               slice({vitri_dau},{vitri_cuoi}) : Nó sẽ cắt từ phần tử này đến pt kia
                         vd:
                              var tung=['tung','thanh','nguyen']; 
                              console.log(tung.slice(1,2));
                              ==>Kết quả: ['thanh']

               concat    :  Kết hợp 2  mảng lại vs nhau thành  1 mảng
                         vd: 
                         var tung=['tung','thanh','nguyen'];
                         var tung2=['tung','thanh','nguyen'];
                         console.log(tung.concat(tung2))
                         ==>Kết quả: ['tung','thanh','nguyen','tung','thanh','nguyen']
               
          Các phương thức trong mảng:
               forEach() :  Gọi từng hàm cho  từng phần tử.
                         vd:
                                   <p id="demo"></p>
                                   <script>
                                        let text = "";
                                        const fruits = ["apple", "orange", "cherry"];
                                        fruits.forEach(myFunction);
                                        document.getElementById("demo").innerHTML = text;
                                        function myFunction(item, index) {
                                        text += index + ": " + item + "<br>"; }
                                   </script>

                         KQ==>     0: apple
                                   1: orange
                                   2: cherry
                         link: https://www.youtube.com/watch?v=AT-yhX26_Ao&list=PL_-VfJajZj0VgpFpEVFzS5Z-lkXtBe-x5&index=49 | s3scholl

               every() : Kiểm tra TẤT CẢ các phần tử trong mảng có cùng giá trị không(có: true, không:false)
                         vd:
                                   var  arr=[
                                   {name1:'tung',age:'1'},{name2:'tung',age:'1'},{name3:'tung',age:'1'},{name4:'tung',age:'1'},
                                   ]
                                   var tim= arr.every(function(arr,index){
                                        console.log(index)
                                        return arr.age == 1;
                                   })
                                   console.log(tim)
                         KQ==> true
                         link: https://www.youtube.com/watch?v=AT-yhX26_Ao&list=PL_-VfJajZj0VgpFpEVFzS5Z-lkXtBe-x5&index=49 | s3scholl

               some() : Kiểm tra phần tử nếu một phần tử đúng sẽ trả về true(Ngược lại với every()--> Bên trên)
                         vd:
                                   var  arr=[
                                   {name1:'tung',age:'1'},{name2:'tung',age:'2'},{name3:'tung',age:'1'},{name4:'tung',age:'1'},
                                   ]
                                   var tim= arr.some(function(arr,index){
                                        console.log(index)
                                        return arr.age == 2;
                                   })
                                   console.log(tim)
                         KQ==> true
                         link: tham khảo bên trên
                    
               find() : Tìm phần tử trong mảng( chỉ trả về 1 kết quả duy nhất )
                         vd:
                                   var  arr=[
                                   {name:'tung',age:'1'},{name:'tung',age:'1'},{name:'tung',age:'1'},{name:'tung',age:'1'},
                                   ]
                                   var tim= arr.find(function(arr,index){
                                        console.log(index)
                                        return arr.name == 'tung';
                                   })
                                   console.log(tim)
                         KQ==> 0
                              { name: 'tung', age: '1' }

               * Lưu ý: Nếu nó tìm thấy phần tử ở đầu thì nó sẽ không tìm tiếp các phần tử sau nữa!

               filter : Tìm phần tử nhưng nó sẽ khác find() là nó sẽ trả về tất cả phần tử thỏa mãn.
                         vd:
                                   var  arr=[
                                        {name:'tung',age:'1'},{name:'tung',age:'12'},{name:'tung',age:'15'},
                                   ]
                                   var tim= arr.filter(function(arr,index){
                                        return arr.name == 'tung';
                                   })
                                   console.log(tim)

                         KQ==>[
                              { name: 'tung', age: '1' },
                              { name: 'tung', age: '12' },
                              { name: 'tung', age: '15' }
                              ]

               * lưu ý nó cũng hoạt động như find() chỉ là nó sẽ trả về tất cả phần tử thoản mãn nó.

               map :  chèn kí tự vào 

               
##############################################################################################################################################################
HÀM JAVASCRIPT: FUNCTION()  giông như def(python)  hay void(c++)
     ------------------------------------------------
          return : {giá_trị} --> Nó sẽ trả về bất kì kiểu dữ liệu  gì nó sẽ phụ thuôcj  vào ta định  dạng nó.
          arguments : cho  phép  bạn  sử dụng  chuyền dữ liệu  vào function và trả về dạng  arr 

     -------------------ĐỊNH  DẠNG BÊN DƯỚI-----------------------------
               function {ten_bien}() {
                    /// code cua ban
               }
     -------------------VD-----------------------------
          VD:
               function Arguments() {
                    console.log(arguments)
               }
               /// chay function
               function Arguments('tung','thanh','nguyen');
          vd khác:
               function tesst() {
                    var so='';
                    for (var tung of  arguments) {
                    so +=`${tung} : `
                    }
                    console.log(so);
               }
               tesst('a','b',123,true,'c')
##############################################################################################################################################################
POLYFILL:  cách nó kiểu tra xem  các trình duyệt có hỗ trợ chạy  đc code không
                         Link  tham khảo: https://youtu.be/zFO-sSfReFs?si=-GoHzrA7LeHj16iO
                         ==>  xem để hiểu dõ hơn về Polyfill  trong Js.

##############################################################################################################################################################
Làm việc  với OBJECT: giống như json(python) 
          - Tạo  ra một object:
                         vd:
                              var object={
                                   name:'tung',
                                   'full-name':'nguyen thanh tung',
                              }
                              // Truy cập vào property của Object
                              console.log(object.name)
                              console.log(object['full-name'])

                                             Kết_quả_trả_về-->tung
                                             Kết_quả_trả_về-->nguyen thanh tung
          - Thêm Property vào Object:
                            vd:
                                object.age=25;
                                console.log(object.age)

                                        Kết_quả_trả_về-->==>25
          - Xóa Property của Object:
                             delete object.age;
                             console.log(object.age)
                                        Kết_quả_trả_về--->undefined
          - Sửa Value của Property:
                               object.name='thanh';
                               console.log(object.name)
                                        Kết_quả_trả_về-->==>'thanh'
          - Tạo mảng trong Object:
                           Object.defineProperty(object,"arr",{value:[1,2,3]})
                           console.log(object.arr) 
                                        Kết_quả_trả_về-->[1,2,3]
          - Tạo function  trong Object:
                          var tung{
                              name:'tung',
                              age: 20,
                              t: function{
                                   'toi la  nguyen'+this.name+'toi nam nay '+this.age;
                              }   
                          }
          - Lấy giá trị  tất cả bằng For Object.values({Tên_object}):
               vd:
                         var object={
                              name:'thanh tung',
                              diem :{
                                   diemToan:10,
                                   diemLy:8,
                                   diemHoa:7,
                                   diemVan:9,
                                   diemAnh:8,
                              },
                         }
                         for(var so in Object.values(object.diem)){
                              document.write(`<h1> ${so}</h1>`)
                         }
                    --> Object.values : LÀ CHUYỂN OBJECT THÀNH ARR 


                    *Lưu ý:  Khi ta dùng Function  thì ta lên sử dụng  THIS.{GIÁ_TRỊ_oBJECT}  TRONG FUNCTION()
                             Thay  vì dùng tung.name trong function thì ta nên dùng THIS ví dụ  bên trên
               
          Tham khảo thêm : https://www.youtube.com/watch?v=FO1OMbT_k2w&list=PL_-VfJajZj0VgpFpEVFzS5Z-lkXtBe-x5&index=32&pp=iAQB
          Tham khảo thêm  file : tk_function.js

     =================================================================================================================================
          OBJECT-conSTRUCTOR: nó  giống như  struc(C++) gần như  vậy:
                    vd:
                         function struct(name,age,avata){
                         this.name=name;
                         this.age=age;
                         this.avata=avata;
                         }
                         var admin= new struct('admin','20','jusst')
                         admin.bien_new='new_admin'
                         var canhan= new struct('canhan','20','tung')
                         canhan.bien_canhan='new_canhan'
                         console.log(admin,canhan)

                    ===>  KẾT QUẢ TRẢ VỀ:
                         struct {
                         name: 'admin',
                         age: '20',
                         avata: 'jusst',
                         bien_new: 'new_admin'
                         } struct {
                         name: 'canhan',
                         age: '20',
                         avata: 'tung',
                         bien_canhan: 'new_canhan'
                         }
                    //  VớiViệc tạo ra như  z nó sẽ làm cho  ta  tối ưu hóa việc  viết code cx  như chuyên nghiệp  hơn.
     =================================================================================================================================
          OBJECT-PROTOTYPE: Nó cho  phép  bạn thực hiện ở bên ngoài để khởi tạo giá trị cho  OBJECT-CONSTRUCTOR:
                              NÓ GIỐNG NHƯ LÀ STRUCT TRONG C++,  XEM CHI TIẾT VÍ DỤ BÊN DƯỚI.
                         VD:
                              function struct(name,age,avata){
                              this.name=name;
                              this.age=age;
                              this.avata=avata;
                              }
                              struct.prototype.thanh='tung';
                              var admin= new struct('admin','20','jusst')
                              var canhan= new struct('canhan','20','tung')

                              console.log(admin.thanh,canhan.thanh)
                         -->  KẾT QUẢ TRẢ VỀ: tung tung

                    * CHÚ Ý: Khi  dùng prototype  thì object chính sẽ thêm vào một biến và tất cả các thằng Object phụ sẽ thêm  vào biến đó 
                              ->> xem link tham khao phia duoi
               
               
               LINK THAM KHAO: https://www.youtube.com/watch?v=FO1OMbT_k2w&list=PL_-VfJajZj0VgpFpEVFzS5Z-lkXtBe-x5&index=32

##############################################################################################################################################################
ĐỐI TƯỢNG DATE: LẤY GIÁ TRỊ THỜI GIAN
          date=new Date()          :Khai  báo Date khi  dùng New để lấy giá trị ngày tháng năm
          date= Date()             :Khai báo Date khi k  dùng New không lấy được giá trị (trả về kiểu string)
          //  Khi ta không dùng NEW Date  thì nó sẽ lấy thời gian hiện tại của máy chính lúc nó chạy
          //  Khi ta       dùng NEW thì ta có thể điều chỉnh thời gian được.

          date.getFullYear()       :Lấy thời gian năm
          date.getMonth()          :Lấy thời gian tháng
          date.getDate()           :Lấy thời gian ngày
          date.getHours()          :Lấy thời gian giờ
          date.getMinutes()        :Lấy thời gian phút
          date.getSeconds()        :Lấy thời gian giây

          //  getFulYear: lấy 4 chữ số làm năm 0-9999
          //  setFulYear: lấy 2 chữ số cuối làm năm 0-99
          //  Tham khảo thêm  ở đây:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
##############################################################################################################################################################
IF VS ELES :Sử dụng giống như  C++ 
          vd:
               var tung=1;
               if (tung===1){
               console.log('tung day')
               }else if(tung===2){
               console.log('tung day')
               }else{
               console.log('khong phai tung')
               }
##############################################################################################################################################################
HAM SWITCH: 
          VD:
               var tung=9;
               switch (tung){
                    case 9:
                         console.log("thang sinh cua tung la thang "+tung);
                         break;
                    case 1,2,3,4,5,6,7,8,10,11,12:
                         console.log("khong phai thang sinh cua tung");
                         break;
                    default:
                         console.log('khong co thang nao  trong nay');
                         break;
               }
##############################################################################################################################################################
TOÁN TỬ 3 NGÔI : Cách viết tắt của if , else:
               vd: khi không viết tắt :

                    var a,b;
                    a=1;b=2;
                    if(a>0 ){
                         console.log(a)
                    }else{console.log(b)}

               vd: khi viết tắt: 
                    var a,b,c;
                    a=1;b=2;
                    c=a>0?a:b
          ===> Trong trường hợp viết tắt if , else là khi các câu lệnh bên trong if,else đơn giản thì lên sử dụng
          ===> Trong trường hợp các câu lệnh bên trong if ,else phức tạp phải viết hẩn ra.

##############################################################################################################################################################
THAY ĐỔI SỰ KIỆN TRONG HTML : 
          -reload()   : Link  tham  khao  : https://www.w3schools.com/jsref/met_loc_replace.asp
          -onclick             : Được kích hoạt khi nhấn vào chuột element          
          -onLoad &  Unload    : Dược kích hoạt khi ngươif dùng vào hoaej  thaots khoải  chương tunhf
          -on Focus  & onBlur & onchange : 
                    onFocus   :
                    onBlur    :
                    onChange  :
          -onMouseOver & onMouseout      :
                    onMouseout:





##############################################################################################################################################################
                         JS NÂNG CAO 



document    : Để nó tương tác với nọi dung của trang web
               -DOM (DATA OBJECT MODEL):  DÙNG DOM ĐỂ  LẤY DATA  TRONG  HTML
               -Truy cập phần tử HTML:
                    getElementById() ===>  Trả về phần tử HTML với id cụ thể.
                    getElementsByClassName() ===>  Trả về một mảng chứa tất cả các phần tử có class cụ thể.
                    getElementsByTagName() ===>  Trả về một mảng chứa tất cả các phần tử với tên thẻ HTML cụ thể.
                    querySelector() ===>  Trả về phần tử đầu tiên phù hợp với bộ chọn CSS được cung cấp.
                    querySelectorAll() ===>  Trả về tất cả các phần tử phù hợp với bộ chọn CSS được cung cấp dưới dạng NodeList.
              
               -Thao tác với nội dung và thuộc tính HTML:
                    document.write()    : Có nhiệm vụ là để viết vào html  khi nó được gọi đến:
                                        vd:
                                             document.write('<h1>thanhtung</h1>')

                    document.innerHTML  ===> Lấy hoặc đặt HTML bên trong một phần tử.
                    document.innerText hoặc textContent  ===> Lấy hoặc đặt văn bản của một phần tử.
                    document.getAttribute()  ===> Trả về giá trị của một thuộc tính được chỉ định của một phần tử.
                    document.setAttribute()  ===> Đặt giá trị cho một thuộc tính cụ thể của một phần tử.
                    document.removeAttribute()  ===> Xóa một thuộc tính cụ thể khỏi một phần tử.
                              VD: 
                                   var tung=document.getElementById("tung");
                                   tung.innerHTML= `<p>thanh tung</p>`;
                                   
               -Tạo và xóa phần tử HTML mới:

                    createElement(): Tạo một phần tử HTML mới với tên thẻ được chỉ định.
                    appendChild(): Thêm một phần tử con vào cuối danh sách các phần tử con của một phần tử cha.
                    removeChild(): Xóa một phần tử con khỏi phần tử cha.
               
               -Xử lý sự kiện:
                    addEventListener(): Gắn một bộ xử lý sự kiện cho một phần tử.
                    removeEventListener(): Loại bỏ một bộ xử lý sự kiện đã được gắn với một phần tử.
               
               -Cookie:
                    cookie: Thuộc tính của document cho phép bạn đọc và ghi các cookie.
               
               -Định vị và cuộn trang:
                    scrollTo(): Cuộn trang đến vị trí được chỉ định.
                    scrollBy(): Cuộn trang theo một số lượng cụ thể.
               
               -Thông tin trang:
                    document.URL: Trả về URL của trang hiện tại.
                    document.title: Trả về hoặc đặt tiêu đề của trang.


removeChild:


addEventListener()  : Hiểu một cách đơn giản nó là phương pháp được đề xuất để quảnlys trình sử lý:
               - keyup: sử lý phím được nhấn và sau đó đc thả ra trên bàn phím.
               - click: Sự kiện này xảy ra khi một phần tử được nhấn (click) bởi người dùng.
               - mouseover và mouseout: Sự kiện mouseover xảy ra khi con trỏ chuột đi vào phần tử, trong khi sự kiện mouseout xảy ra khi con trỏ chuột rời khỏi phần tử đó.
               - change: Sự kiện này xảy ra khi giá trị của một phần tử input, select, hoặc textarea thay đổi.
               - submit: Sự kiện này xảy ra khi một form được gửi đi (submit).
               - keydown và keypress: Sự kiện keydown xảy ra khi một phím được nhấn xuống, trong khi sự kiện keypress xảy ra khi một phím được nhấn và giữ (nhưng chưa thả ra).
               - focus và blur: Sự kiện focus xảy ra khi một phần tử nhận được focus, trong khi sự kiện blur xảy ra khi một phần tử mất focus.

                    VD:
                         // Lắng nghe sự kiện "click" trên một nút
                         document.getElementById("clickButton").addEventListener("click", function() {
                         alert("Nút đã được nhấn!");
                         });

                         // Lắng nghe sự kiện "mouseover" trên một phần tử
                         document.getElementById("mouseOverDiv").addEventListener("mouseover", function() {
                         this.style.backgroundColor = "lightblue";
                         });

                         // Lắng nghe sự kiện "change" trên một trường input
                         document.getElementById("textInput").addEventListener("change", function() {
                         alert("Giá trị đã thay đổi thành: " + this.value);
                         });

                         // Lắng nghe sự kiện "submit" trên một form
                         document.getElementById("testForm").addEventListener("submit", function(event) {
                         event.preventDefault(); // Ngăn chặn hành động mặc định của form
                         alert("Form đã được gửi đi!");
                         });

                         // Lắng nghe sự kiện "keydown" trên trang
                         document.addEventListener("keydown", function(event) {
                         console.log("Phím " + event.key + " đã được nhấn xuống.");
                         });

                         // Lắng nghe sự kiện "keypress" trên trang
                         document.addEventListener("keypress", function(event) {
                         console.log("Phím " + event.key + " đã được nhấn và giữ.");
                         });

                         // Lắng nghe sự kiện "focus" trên một trường input
                         document.getElementById("focusInput").addEventListener("focus", function() {
                         this.style.backgroundColor = "lightgreen";
                         });

                         // Lắng nghe sự kiện "blur" trên một trường input
                         document.getElementById("blurInput").addEventListener("blur", function() {
                         this.style.backgroundColor = "white";
                         });


